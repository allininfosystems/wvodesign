<?php

/**
* @package	vB Bad Behavior (vB4)
* @author	Eric Sizemore <admin@secondversion.com>
* @version	1.0.13
* @license	GNU LGPL http://www.gnu.org/licenses/lgpl.txt
* 
*	vB Bad Behavior - Integrates vBulletin and Bad Behavior
*	Copyright (C) 2011 - 2013 Eric Sizemore
*
*	vB Bad Behavior is free software; you can redistribute it and/or modify it under
*	the terms of the GNU Lesser General Public License as published by the Free
*	Software Foundation; either version 3 of the License, or (at your option) any
*	later version.
*
*	This program is distributed in the hope that it will be useful, but WITHOUT ANY
*	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
*	PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
*
*	You should have received a copy of the GNU Lesser General Public License along
*	with this program. If not, see <http://www.gnu.org/licenses/>.
*/

/*
Bad Behavior - detects and blocks unwanted Web accesses
Copyright (C) 2005,2006,2007,2008,2009,2010,2011,2012 Michael Hampton

Bad Behavior is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with this program. If not, see <http://www.gnu.org/licenses/>.

Please report any problems to bad . bots AT ioerror DOT us
http://www.bad-behavior.ioerror.us/
*/

// ###############################################################################
// ###############################################################################
// ###############################################################################
define('BB2_CWD', dirname(__FILE__));

// Settings you can adjust for Bad Behavior.
// Most of these are unused in non-database mode.
// DO NOT EDIT HERE; instead make changes in vBulletin Options
$bb2_settings_defaults = array(
	'log_table'               => TABLE_PREFIX . 'vb_badbehavior',
	'display_stats'           => false,
	'strict'                  => false,
	'verbose'                 => false,
	'logging'                 => true,
	'httpbl_key'              => '',
	'httpbl_threat'           => '25',
	'httpbl_maxage'           => '30',
	'eu_cookie'               => false,
	'offsite_forms'           => true,
	'reverse_proxy'           => false,
	'reverse_proxy_header'    => 'X-Forwarded-For',
	'reverse_proxy_addresses' => array()
);

// Bad Behavior callback functions.

// Return current time in the format preferred by your database.
function bb2_db_date()
{
	return gmdate('d-m-Y H:i:s');
}

// Return affected rows from most recent query.
function bb2_db_affected_rows()
{
	global $vbulletin;

	return $vbulletin->db->affected_rows();
}

// Escape a string for database usage
function bb2_db_escape($string)
{
	global $vbulletin;

	return $vbulletin->db->escape_string($string);
}

// Return the number of rows in a particular query.
function bb2_db_num_rows($result)
{
	if ($result !== false)
	{
		return count($result);
	}
	return 0;
}

// Run a query and return the results, if any.
// Should return FALSE if an error occurred.
// Bad Behavior will use the return value here in other callbacks.
function bb2_db_query($query)
{
	global $vbulletin;

	$vbulletin->db->hide_errors();

	if (preg_match("/^\\s*(insert|delete|update|replace|alter|set) /i", $query))
	{
		$vbulletin->db->query_write($query);

		return bb2_db_affected_rows();
	}

	$result = array();
	$results = array();

	$query = $vbulletin->db->query_read($query);
	$func = ($vbulletin->config['Database']['dbtype'] == 'mysql') ? 'mysql_fetch_object' : 'mysqli_fetch_object';

	if (!$query)
	{
		return false;
	}

	$i = 0;

	while ($row = @$func($query))
	{
		$results[$i] = $row;
		$i++;
	}

	if (!$results)
	{
		return false;
	}

	foreach ((array)$results AS $row)
	{
		$result[] = get_object_vars($row);
	}
	return $result;
}

// Return all rows in a particular query.
// Should contain an array of all rows generated by calling mysql_fetch_assoc()
// or equivalent and appending the result of each call to an array.
function bb2_db_rows($result)
{
	return $result;
}

// Our log table structure
function bb2_table_structure($name)
{
	// It's not paranoia if they really are out to get you.
	$name_escaped = bb2_db_escape($name);
	return "CREATE TABLE IF NOT EXISTS `$name_escaped` (
	`id` INT(11) NOT NULL auto_increment,
	`ip` TEXT NOT NULL,
	`date` DATETIME NOT NULL default '0000-00-00 00:00:00',
	`request_method` TEXT NOT NULL,
	`request_uri` TEXT NOT NULL,
	`server_protocol` TEXT NOT NULL,
	`http_headers` TEXT NOT NULL,
	`user_agent` TEXT NOT NULL,
	`request_entity` TEXT NOT NULL,
	`key` TEXT NOT NULL,
	INDEX (`ip`(15)),
	INDEX (`user_agent`(10)),
	PRIMARY KEY (`id`)
);";
}

// Create the SQL query for inserting a record in the database.
function bb2_insert($settings, $package, $key)
{
	$ip = bb2_db_escape($package['ip']);
	$request_method = bb2_db_escape($package['request_method']);
	$request_uri = bb2_db_escape($package['request_uri']);
	$server_protocol = bb2_db_escape($package['server_protocol']);
	$user_agent = bb2_db_escape($package['user_agent']);
	$headers = "$request_method $request_uri $server_protocol\n";

	foreach ($package['headers'] AS $h => $v)
	{
		$headers .= bb2_db_escape("$h: $v\n");
	}

	$request_entity = '';

	if (!strcasecmp($request_method, 'POST'))
	{
		foreach ($package['request_entity'] AS $h => $v)
		{
			$request_entity .= bb2_db_escape("$h: $v\n");
		}
	}

	return "INSERT INTO `" . bb2_db_escape($settings['log_table']) . "`
	(`ip`, `date`, `request_method`, `request_uri`, `server_protocol`, `http_headers`, `user_agent`, `request_entity`, `key`)
VALUES
	('$ip', NOW(), '$request_method', '$request_uri', '$server_protocol', '$headers', '$user_agent', '$request_entity', '$key')";
}

// Return emergency contact email address.
function bb2_email()
{
	global $vbulletin;

	if ($vbulletin->options['webmasteremail'] != '')
	{
		return str_replace(array('@', '.'), array('(&#64;)', '(&#46;)'), $vbulletin->options['webmasteremail']);
	}
	else if ($vbulletin->config['Database']['technicalemail'] != '')
	{
		return str_replace(array('@', '.'), array('(&#64;)', '(&#46;)'), $vbulletin->config['Database']['technicalemail']);
	}
	else
	{
		return '';
	}
}

// Converts vB's yes/no in vBulletin Options to true/false
function __bb2_read_settings_helper($value)
{
	return ($value == 1) ? true : false;
}

// retrieve settings from database
function bb2_read_settings()
{
	global $vbulletin;

	// http:BL Do we have an API Key?
	// All Access Keys are 12-characters in length, lower case, and contain only alpha characters (no numbers).
	if (strlen($vbulletin->options['vb_badbehavior_httpbl_key']) != 12 OR !ctype_lower($vbulletin->options['vb_badbehavior_httpbl_key']))
	{
		$vbulletin->options['vb_badbehavior_httpbl_key'] = '';
	}

	// http:BL Threat Level needs to be an integer
	if ((int)$vbulletin->options['vb_badbehavior_httpbl_threat'] == 0)
	{
		$vbulletin->options['vb_badbehavior_httpbl_threat'] = 25;
	}

	// http:BL Max. Age needs to be an integer as well
	if ((int)$vbulletin->options['vb_badbehavior_httpbl_maxage'] == 0)
	{
		$vbulletin->options['vb_badbehavior_httpbl_maxage'] = 30;
	}

	// Make sure that the proxy addresses are split into an array, and if it's empty - make sure reverse proxy is disabled
	if (!empty($vbulletin->options['vb_badbehavior_reverse_proxy_addresses']))
	{
		$vbulletin->options['vb_badbehavior_reverse_proxy_addresses'] = preg_split("#\n#", trim($vbulletin->options['vb_badbehavior_reverse_proxy_addresses']), -1, PREG_SPLIT_NO_EMPTY);
	}
	else
	{
		$vbulletin->options['vb_badbehavior_reverse_proxy_addresses'] = array();
		$vbulletin->options['vb_badbehavior_reverse_proxy'] = 0;
	}

	// also, make sure the header is set
	if (empty($vbulletin->options['vb_badbehavior_reverse_proxy_header']))
	{
		$vbulletin->options['vb_badbehavior_reverse_proxy_header'] = 'X-Forwarded-For';
	}

	// return settings
	return array(
		'log_table'               => TABLE_PREFIX . 'vb_badbehavior',
		'display_stats'           => false,
		'strict'                  => __bb2_read_settings_helper($vbulletin->options['vb_badbehavior_strict']),
		'verbose'                 => __bb2_read_settings_helper($vbulletin->options['vb_badbehavior_verbose']),
		'logging'                 => __bb2_read_settings_helper($vbulletin->options['vb_badbehavior_logging']),
		'httpbl_key'              => $vbulletin->options['vb_badbehavior_httpbl_key'],
		'httpbl_threat'           => $vbulletin->options['vb_badbehavior_httpbl_threat'],
		'httpbl_maxage'           => $vbulletin->options['vb_badbehavior_httpbl_maxage'],
		'eu_cookie'               => __bb2_read_settings_helper($vbulletin->options['vb_badbehavior_eucookie']),
		'offsite_forms'           => true,
		'reverse_proxy'           => __bb2_read_settings_helper($vbulletin->options['vb_badbehavior_reverse_proxy']),
		'reverse_proxy_header'    => $vbulletin->options['vb_badbehavior_reverse_proxy_header'],
		'reverse_proxy_addresses' => $vbulletin->options['vb_badbehavior_reverse_proxy_addresses']
	);
}

// write settings to database
function bb2_write_settings($settings)
{
	return false;
}

// installation
function bb2_install()
{
	return false;
}

// Screener
// Insert this into the <head> section of your HTML through a template call
// or whatever is appropriate. This is optional we'll fall back to cookies
// if you don't use it.
function bb2_insert_head()
{
	global $bb2_javascript;

	return $bb2_javascript;
}

// Display stats? This is optional.
function bb2_insert_stats($force = false)
{
	return '';
}

// Return the top-level relative path of wherever we are (for cookies)
// You should provide in $url the top-level URL for your site.
function bb2_relative_path()
{
	global $vbulletin;

	$url = parse_url($vbulletin->options['bburl']);
	return $url['path'] . '/';
}

// Helper function for bb2_log_userid()
function __walker($var)
{
	return (strpos($var, 'Cookie') !== false);
}

// Determines if vB Bad Behavior has blocked a user request
// Checks to see of userid is present in the Cookie header
function bb2_log_userid($headers)
{
	if (!empty($headers))
	{
		$_tmp = explode("\n", $headers);
		$_tmp = implode('', array_filter($_tmp, '__walker'));
		$_tmp = str_replace(';', '&', $_tmp);

		if (empty($_tmp))
		{
			return false;
		}

		parse_str($_tmp);

		$userid = COOKIE_PREFIX . 'userid';

		return iif($$userid > 0, $$userid, false);
	}
	return false;
}

// Calls inward to Bad Behavor itself.
require_once(BB2_CWD . '/bad-behavior/core.inc.php');
